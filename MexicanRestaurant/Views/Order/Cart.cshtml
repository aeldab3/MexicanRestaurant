@using MexicanRestaurant.WebUI.ViewModels
@model OrderViewModel
@{
    ViewData["MetaDescription"] = "View your cart with selected Mexican dishes. Adjust quantities or proceed to checkout.";
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow-lg border-0">
                <div class="card-header bg-success text-white text-center">
                    <h2 class="fw-bold mb-0">🛒 My Cart</h2>
                    <p class="fw-light mb-0">Review your order before placing it</p>
                </div>

                <div class="card-body">
                    @if (Model.OrderItems != null && Model.OrderItems.Any())
                    {
                        <form asp-action="PlaceOrder" method="post">
                            @Html.AntiForgeryToken()
                                <div id="cart-container">
                                    @Html.Partial("_CartPartial", Model)
                                </div>

                            <div class="text-end mt-4 d-flex justify-content-between">
                                <a asp-action="Create" class="btn btn-lg btn-secondary px-5 shadow-sm">
                                    <i class="bi bi-arrow-left"></i> Back to Products
                                </a>
                                <input type="submit" value="Place Order" class="btn btn-lg btn-success px-5 shadow-sm" />
                            </div>
                        </form>
                    }
                    else
                    {
                        <p class="text-muted text-center">🛒 Your cart is currently empty.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .cart-img {
        width: 70px;
        height: 70px;
        object-fit: cover;
        border-radius: 8px;
        border: 1px solid #ddd;
    }
</style>

@section Scripts {
    <script>
        document.addEventListener("click", function (e) {
            if (e.target.classList.contains("btn-increase")) {
                const productId = e.target.dataset.productId;
                const stock = parseInt(e.target.dataset.stock);
                const quantitySpan = document.querySelector(`.item-qty[data-product-id='${productId}']`);
                const currentQuantity = parseInt(quantitySpan?.textContent || 0);

                 if (stock <= currentQuantity) {
                    showToast("❌ Out of Stock.", "warning");
                    return;
                 }

                fetch("/Order/Increase", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                    },
                    body: `productId=${productId}`
                })
                .then(response => {
                    if (response.ok) {
                        refreshCart();
                        showToast("✅ Quantity increased.");
                    }
                    else showToast("❌ Failed to increase item.", "error");
                });
            }
        });

        document.addEventListener("click", function (e) {
            if (e.target.classList.contains("btn-decrease")) {
                const productId = e.target.dataset.productId;
                const quantity = parseInt(e.target.dataset.quantity);
                const url = quantity > 1 ? "/Order/Decrease" : "/Order/Remove";

                fetch(url, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                    },
                    body: `productId=${productId}`
                })
                .then(response => {
                   if (response.ok) {
                        refreshCart();
                        if (quantity > 1) {
                            showToast("🔽 Quantity decreased.");
                        } else {
                            showToast("🗑️ Product removed from cart.");
                        }
                   } 
                   else 
                   {
                       showToast("❌ Failed to update quantity.", "error");
                       return;
                   }
                });
            }
        });

        // 📌 Refresh cart content + cart icon after add/remove/update
        async function refreshCart() {
            // update cart content
            const cartRes = await fetch("/Order/CartPartial");
            if (cartRes.ok) {
                const cartContentUpdate = await cartRes.text();
                document.getElementById("cart-container").innerHTML = cartContentUpdate;
            }
            // update cart icon
            const iconRes = await fetch("/Order/CartIconPartial");
            if (iconRes.ok) {
                const cartIconUpdate = await iconRes.text();
                document.getElementById("cart-icon-container").innerHTML = cartIconUpdate;
            }
        }
    </script>
}
