@using MexicanRestaurant.WebUI.ViewModels
@model CheckoutViewModel
@{
    ViewData["Title"] = "Checkout";
    ViewData["MetaDescription"] = "This is the process for checkout your order";
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-xl-10 col-lg-11 col-md-12">
            <div class="card shadow-lg border-0">
                <div class="card-header bg-success text-white text-center py-4">
                    <h2 class="fw-bold mb-0">🚚 Checkout</h2>
                    <p class="fw-light mb-0">Enter your shipping info and choose delivery method</p>
                </div>

                <div class="card-body p-4">
                    <form asp-action="Checkout" method="post" id="checkoutForm">
                        @Html.AntiForgeryToken()

                        <!-- Step 1: Shipping Address -->
                        <div id="step1" class="checkout-step">
                            <h3 class="mb-3">📍 Shipping Address</h3>
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label asp-for="ShippingAddress.FirstName" class="form-label">First Name</label>
                                    <input asp-for="ShippingAddress.FirstName" class="form-control" required />
                                    <span asp-validation-for="ShippingAddress.FirstName" class="text-danger"></span>
                                </div>
                                <div class="col-md-6">
                                    <label asp-for="ShippingAddress.LastName" class="form-label">Last Name</label>
                                    <input asp-for="ShippingAddress.LastName" class="form-control" required />
                                    <span asp-validation-for="ShippingAddress.LastName" class="text-danger"></span>
                                </div>
                                <div class="col-12">
                                    <label asp-for="ShippingAddress.Street" class="form-label"></label>
                                    <input asp-for="ShippingAddress.Street" class="form-control" required />
                                    <span asp-validation-for="ShippingAddress.Street" class="text-danger"></span>
                                </div>
                                <div class="col-md-4">
                                    <label asp-for="ShippingAddress.City" class="form-label"></label>
                                    <input asp-for="ShippingAddress.City" class="form-control" required />
                                    <span asp-validation-for="ShippingAddress.City" class="text-danger"></span>
                                </div>
                                <div class="col-md-4">
                                    <label asp-for="ShippingAddress.State" class="form-label"></label>
                                    <input asp-for="ShippingAddress.State" class="form-control" required />
                                    <span asp-validation-for="ShippingAddress.State" class="text-danger"></span>
                                </div>
                                <div class="col-md-4">
                                    <label asp-for="ShippingAddress.Zipcode" class="form-label"></label>
                                    <input asp-for="ShippingAddress.Zipcode" class="form-control" required />
                                    <span asp-validation-for="ShippingAddress.Zipcode" class="text-danger"></span>
                                </div>
                                <div class="col-12">
                                    <label asp-for="ShippingAddress.PhoneNumber" class="form-label">Phone Number</label>
                                    <input asp-for="ShippingAddress.PhoneNumber" class="form-control" required />
                                    <span asp-validation-for="ShippingAddress.PhoneNumber" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="d-flex justify-content-between mt-4">
                                <a asp-action="Cart" asp-controller="Order" class="btn btn-secondary shadow-sm">Back to cart</a>
                                <button type="button" class="btn btn-success shadow-sm next-step">Continue to Delivery</button>
                            </div>
                        </div>

                        <!-- Step 2: Delivery Method -->
                        <div id="step2" class="checkout-step" style="display:none;">
                            <h3 class="mb-3">🚛 Delivery Method</h3>
                            @if (Model.AvailableDeliveryMethods != null && Model.AvailableDeliveryMethods.Any())
                            {
                                foreach (var method in Model.AvailableDeliveryMethods)
                                {
                                    <div class="form-check mb-2">
                                        <label class="form-check-label">
                                            <input class="form-check-input" type="radio" asp-for="SelectedDeliveryMethodId" value="@method.Id" data-price="@method.Price" required />
                                            <strong>@method.ShortName</strong> - @method.Description (@method.Price.ToString("C"))
                                        </label>
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="text-danger">⚠️ No delivery methods available.</p>
                            }
                            <span asp-validation-for="SelectedDeliveryMethodId" class="text-danger"></span>
                            <div class="d-flex justify-content-between mt-4">
                                <button type="button" class="btn btn-secondary shadow-sm prev-step">Back to Address</button>
                                <button type="button" class="btn btn-success shadow-sm next-step">Continue to Review</button>
                            </div>
                        </div>

                        <!-- Step 3: Review -->
                        <div id="step3" class="checkout-step" style="display:none;">
                            <h3 class="mb-3">🧾 Review Your Order</h3>
                            <p><strong>Name:</strong> <span id="reviewName"></span></p>
                            <p><strong>Phone:</strong> <span id="reviewPhone"></span></p>
                            <p><strong>Address:</strong> <span id="reviewAddress"></span></p>
                            <p><strong>Delivery:</strong> <span id="reviewDelivery"></span></p>

                            <div class="table-responsive">
                                <table class="table table-bordered table-striped table-hover">
                                    <thead class="table-success">
                                        <tr><th>Product</th><th>Qty</th><th>Price</th></tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.OrderItems)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="d-flex flex-column flex-md-row align-items-md-center gap-2">
                                                        <img src="@Url.Content("~/images/" + item.Product.ImageUrl)" class="img-fluid" style="max-width: 80px; height: auto; border-radius: 8px;" />
                                                        <span class="fw-semibold text-dark">@item.Product.Name</span>
                                                    </div>
                                                </td>
                                                <td>@item.Quantity</td>
                                                <td>@((item.Price * item.Quantity).ToString("C"))</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            <p class="mt-3 fs-5"><strong>Total:</strong> <span id="reviewTotal">@Model.TotalAmount.ToString("C")</span></p>

                            <div class="d-flex justify-content-between mt-4">
                                <button type="button" class="btn btn-secondary shadow-sm prev-step">Back to Delivery</button>
                                <button type="button" class="btn btn-success shadow-sm next-step">Continue to Payment</button>
                            </div>
                        </div>

                        <!-- Step 4: Payment -->
                        <div id="step4" class="checkout-step" style="display:none;">
                            <h3 class="mb-3">💳 Payment Method</h3>
                            <select asp-for="SelectedPaymentMethod" class="form-select" id="paymentMethodSelect">
                                @foreach(var method in Model.AvailablePaymentMethods)
                                {
                                    <option value="@method">@method</option>
                                }
                            </select>
                            <span asp-validation-for="SelectedPaymentMethod" class="text-danger"></span>
                            <div id="stripePaymentForm" style="display:none;" class="mt-3">
                                <div id="card-element" class="form-control"></div>
                                <div id="card-errors" role="alert" class="text-danger"></div>
                            </div>
                            <div class="d-flex justify-content-between mt-4">
                                <button type="button" class="btn btn-secondary shadow-sm prev-step">Back to Review</button>
                                <button type="submit" class="btn btn-success shadow-sm" id="submitPayment">Submit Order</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const steps = document.querySelectorAll(".checkout-step");
            let currentStep = 0;
            const stripe = Stripe('@Model.StripePublishableKey')
            const elements = stripe.elements();
            let cardElement;

            const initialStep = parseInt('@(ViewBag.Step ?? "0")');
            if (!isNaN(initialStep)) {
                currentStep = initialStep;
            }

            // Initialize Stripe card element when payment step is shown
            const paymentMethodSelect = document.getElementById("paymentMethodSelect");
            paymentMethodSelect.addEventListener("change", function () {
                const stripeForm = document.getElementById('stripePaymentForm');
                if (this.value == 'stripe') {
                    stripeForm.style.display = 'block';
                    if (!cardElement) {
                        cardElement = elements.create('card');
                        cardElement.mount('#card-element')
                    }
                } else {
                    stripeForm.style.display = 'none';
                }
            });

            const showStep = (index) => {
                steps.forEach((step, i) => {
                    step.style.display = i === index ? "block" : "none";
                });

                // Initialize Stripe form if on payment step and Stripe is selected
                if (index === 3 && paymentMethodSelect.value === 'stripe') {
                    document.getElementById('stripePaymentForm').style.display = 'block';
                    if (!cardElement) {
                        cardElement = elements.create('card');
                        cardElement.mount('#card-element');
                    }
                }
            };
            document.querySelectorAll(".next-step").forEach(btn => {
                btn.addEventListener("click", () => {
                    console.log("Next button clicked, currentStep:", currentStep);
                    let proceedToNextStep = true;

                    if (currentStep == 0) {
                        const firstName = document.querySelector('[name="ShippingAddress.FirstName"]').value;
                        const lastName = document.querySelector('[name="ShippingAddress.LastName"]').value;
                        const phone = document.querySelector('[name="ShippingAddress.PhoneNumber"]').value;
                        const street = document.querySelector('[name="ShippingAddress.Street"]').value;
                        const city = document.querySelector('[name="ShippingAddress.City"]').value;
                        const zipCode = document.querySelector('[name="ShippingAddress.Zipcode"]').value;

                        if (!firstName || !lastName || ! phone || !street || !city || !zipCode) {
                            showToast('Please fill in all shipping address fields.', 'warning');
                            proceedToNextStep = false;
                        }
                    }
                    else if (currentStep === 1) {
                        const deliverySelected = document.querySelector('input[name="SelectedDeliveryMethodId"]:checked');
                        if (!deliverySelected) {
                            showToast('Please select a delivery method.', 'warning');
                            proceedToNextStep = false;
                        }
                    }
                    if (proceedToNextStep && currentStep < steps.length -1){
                        currentStep++;
                        showStep(currentStep);
                        if (currentStep === 2) updateReviewStep();
                    }else if (proceedToNextStep && currentStep === steps.length -1) {}
                    console.log("Next button clicked, currentStep (after increment):", currentStep);
                });
            });

            document.querySelectorAll(".prev-step").forEach(btn => {
                btn.addEventListener("click", () => {
                    if (currentStep > 0) {
                        currentStep--;
                        showStep(currentStep);
                    }
                });
            });

            // Handle Stripe Payment
            const checkoutForm = document.getElementById('checkoutForm');
            const submitPaymentBtn = document.getElementById('submitPayment');
            submitPaymentBtn.addEventListener('click', async (e) => {
                const selectedPaymentMethod = paymentMethodSelect.value;
                const firstName = document.querySelector('[name="ShippingAddress.FirstName"]');
                const lastName = document.querySelector('[name="ShippingAddress.LastName"]');
                const phone = document.querySelector('[name="ShippingAddress.PhoneNumber"]');
                const street = document.querySelector('[name="ShippingAddress.Street"]');
                const city = document.querySelector('[name="ShippingAddress.City"]');
                const zipCode = document.querySelector('[name="ShippingAddress.Zipcode"]');
                const deliverySelected = document.querySelector('input[name="SelectedDeliveryMethodId"]:checked');

                if (!firstName.value || !lastName.value || !phone.value || !street.value || !city.value || !zipCode.value || !deliverySelected) {
                    showToast('Please fill in all required fields (Address and Delivery Method).', 'error');
                    currentStep = 0;
                    showStep(currentStep);
                    return;
                }

                e.preventDefault();
                const cardErrors = document.getElementById('card-errors');
                cardErrors.textContent = '';
                console.log("Submitting payment with form data:", new FormData(checkoutForm));

                // Submit form via AJAX to get ClientSecret
                const formData = new FormData(checkoutForm);
                const requestVerificationToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
                formData.append('__RequestVerificationToken', requestVerificationToken);
                const response = await fetch('/Order/Checkout', {
                    method: 'POST',
                    body: formData,
                });
                const result = await response.json();
                console.log("Result:", result);
                if (!result.IsSuccess) {
                    cardErrors.textContent = result.message;
                     if (result.errors && result.errors.length > 0) {
                         showToast(result.errors.join('<br>'), 'error');
                     }
                      if (currentStep !== 0) {
                          showStep(0);
                      }
                    return;
                }

                if (selectedPaymentMethod === 'stripe') {
                    // Confirm Payment Intent with Stripe.js
                    const { error, paymentIntent } = await stripe.confirmCardPayment(result.clientSecret, {
                        payment_method: {
                            card: cardElement
                        }
                    });

                    if (error) {
                        cardErrors.textContent = error.message;
                        showToast(error.message, 'error');
                    } else if (paymentIntent.status === 'succeeded') {
                        showToast('Payment successful!', 'success');
                        window.location.href = '/Order/CheckoutSuccess';
                    }
                } else if (selectedPaymentMethod === 'cash') {
                    showToast('Order placed successfully (Cash on Delivery)!', 'success');
                    window.location.href = result.redirectUrl;
                }
            });
            showStep(currentStep);
        });

        function updateReviewStep() {
            const firstName = document.querySelector('[name="ShippingAddress.FirstName"]').value;
            const lastName = document.querySelector('[name="ShippingAddress.LastName"]').value;
            const phone = document.querySelector('[name="ShippingAddress.PhoneNumber"]').value;
            const street = document.querySelector('[name="ShippingAddress.Street"]').value;
            const city = document.querySelector('[name="ShippingAddress.City"]').value;
            const zipCode = document.querySelector('[name="ShippingAddress.Zipcode"]').value;

            const deliveryInputs = document.querySelectorAll('input[name="SelectedDeliveryMethodId"]');
            let selectedDeliveryText = 'Not selected';
            let deliveryPrice = 0;
            deliveryInputs.forEach(input => {
                if (input.checked) {
                    const label = input.closest('.form-check').querySelector('label');
                    selectedDeliveryText = label.innerText.replace(/\n/g, ' ').trim();
                    deliveryPrice = parseFloat(input.dataset.price || "0");
                }
            });
            const productsTotal = parseFloat("@Model.TotalAmount") || 0;
            const grandTotal = productsTotal + deliveryPrice;

            document.getElementById("reviewName").innerText = `${firstName} ${lastName}`;
            document.getElementById("reviewPhone").innerText = `${phone}`;
            document.getElementById("reviewAddress").innerText = `${street}, ${city}, and Zipcode is: ${zipCode}`;
            document.getElementById("reviewDelivery").innerText = selectedDeliveryText;
            document.getElementById("reviewTotal").innerText = grandTotal.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
        }
    </script>
}
